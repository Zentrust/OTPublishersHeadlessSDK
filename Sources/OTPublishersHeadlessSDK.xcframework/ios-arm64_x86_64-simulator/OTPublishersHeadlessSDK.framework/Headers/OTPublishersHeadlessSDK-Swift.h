#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef OTPUBLISHERSHEADLESSSDK_SWIFT_H
#define OTPUBLISHERSHEADLESSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OTPublishersHeadlessSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



/// Contains information related to the locally cached data of OT SDK.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK5Cache")
@interface Cache : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the type of consent provided by the application.
typedef SWIFT_ENUM_NAMED(NSInteger, OTConsentInteractionType, "ConsentInteractionType", open) {
/// The user has consented by clicking accept all button in Banner view.
/// Passing this will accept all consent values.
  OTConsentInteractionTypeBannerAllowAll = 1,
/// The user has consented by clicking reject all button in Banner view.
/// Passing this will reject all consent values.
  OTConsentInteractionTypeBannerRejectAll = 2,
/// The user has clicked on cancel  button in Banner view.
/// Passing this will set the default consent values.
  OTConsentInteractionTypeBannerClose = 3,
/// The user has consented by clicking allow all button from Preference Center.
/// Passing this will accept all consent values.
  OTConsentInteractionTypePreferenceCenterAllowAll = 4,
/// The user has consented by clicking reject all button from Preference Center.
/// Passing this will reject all consent values.
  OTConsentInteractionTypePreferenceCenterRejectAll = 5,
/// The user has consented by clicking confirm button from Preference Center.
/// Passing this will set the confirmed consent values.
  OTConsentInteractionTypePreferenceCenterConfirm = 6,
/// The user has clicked on cancel  button in Preference Center.
/// note:
/// Consent will not be logged to server when this interaction type is passed.
  OTConsentInteractionTypePreferenceCenterClose = 7,
/// The user has clicked on save choices button in uc Purposes Preference Center.
/// note:
/// Consent will be logged to server when this interaction type is passed.
  OTConsentInteractionTypeConsentPurposesConfim = 8,
/// The user has clicked on cancel button in uc Purposes Preference Center.
/// note:
/// Consent will not be logged to server when this interaction type is passed.
  OTConsentInteractionTypeConsentPurposesClose = 9,
/// The user has consented by clicking confirm button from Vendor List View.
/// Passing this will set the confirmed consent values.
  OTConsentInteractionTypeVendorListConfirm = 10,
/// The user has clicked on Allow  button in ATT View.
  OTConsentInteractionTypeAppTrackingConfirm = 11,
/// The user has clicked on Ask app not to track  button in ATT View.
  OTConsentInteractionTypeAppTrackingOptOut = 12,
/// The user has clicked on confirm  button in Universal Consent Preference Center View.
  OTConsentInteractionTypeUcPreferenceCenterConfirm = 13,
};

/// Enum for IAB CCPA expected values
typedef SWIFT_ENUM(NSInteger, IabCcpaConsent, open) {
  IabCcpaConsentNotApplicable = 0,
  IabCcpaConsentNo = 1,
  IabCcpaConsentYes = 2,
};



/// Enum for OneTrust banner height
typedef SWIFT_ENUM(NSInteger, OTBannerHeightRatio, open) {
/// Show banner in full screen.
  OTBannerHeightRatioFull = 1,
  OTBannerHeightRatioTwo_third = 2,
/// Show banner in half of the screen.
  OTBannerHeightRatioOne_half = 3,
/// Show banner in 1/3rd of the screen.
  OTBannerHeightRatioOne_third = 4,
};

typedef SWIFT_ENUM(NSInteger, OTCCPAGeolocation, open) {
  OTCCPAGeolocationALL = 0,
  OTCCPAGeolocationUS = 1,
  OTCCPAGeolocationCA = 2,
};


/// Conform to this protocol in order to receive various events triggered by OT SDK.
SWIFT_PROTOCOL("_TtP23OTPublishersHeadlessSDK15OTEventListener_")
@protocol OTEventListener
@optional
/// Conform to this method to get notified when Banner view is shown in the view hierarchy.
- (void)onShowBanner;
/// Conform to this method to get notified when Preference Center is shown in the view hierarchy.
- (void)onShowPreferenceCenter;
/// Conform to this method to get notified when Vendor List is shown in the view hierarchy.
- (void)onShowVendorList;
/// Conform to this method to get notified when Consent puurposes is shown in the view hierarchy.
- (void)onShowConsentPurposesUI;
/// Conform to this method to get notified when all the OT SDK Views are dismissed from the view hierarchy.
/// \param interactionType The user interaction type.
///
- (void)allSDKViewsDismissedWithInteractionType:(enum OTConsentInteractionType)interactionType;
/// Conform to this method to get notified when user selects <code>Accept All</code> option from the banner view and the banner view gets dismissed from the view hierarchy.
- (void)onBannerClickedAcceptAll;
/// Conform to this method to get notified when user selects <code>Reject All</code> option from the banner view and the banner view gets dismissed from the view hierarchy.
- (void)onBannerClickedRejectAll;
/// Conform to this method to get notified when user selects <code>Close</code> option from the banner view and the banner view gets dismissed from the view hierarchy.
- (void)onHideBanner;
/// Conform to this method to get notified when user selects <code>Accept All</code> option from the prefence center and the prefence center gets dismissed from the view hierarchy.
- (void)onPreferenceCenterAcceptAll;
/// Conform to this method to get notified when user selects <code>Reject All</code> option from the prefence center and the prefence center gets dismissed from the view hierarchy.
- (void)onPreferenceCenterRejectAll;
/// Conform to this method to get notified when user selects <code>Confirm Choices</code> option from the prefence center and the prefence center gets dismissed from the view hierarchy.
- (void)onPreferenceCenterConfirmChoices;
/// Conform to this method to get notified when user selects <code>Close</code> option from the prefence center and the prefence center gets dismissed from the view hierarchy.
- (void)onHidePreferenceCenter;
/// Conform to this method to get notified when user selects <code>Confirm Choices</code> option from the Vendor List view and the Vendor List view gets dismissed from the view hierarchy.
- (void)onVendorConfirmChoices;
/// Conform to this method to get notified when user selects <code>Back</code> button from the vendor list view and the Vendor List view gets dismissed from the view hierarchy.
- (void)onHideVendorList;
/// Conform to this method to get notified when a purpose consent has changed from Preference Center.
- (void)onPreferenceCenterPurposeConsentChangedWithPurposeId:(NSString * _Nonnull)purposeId consentStatus:(int8_t)consentStatus;
/// Conform to this method to get notified when a purpose legitimate interest has changed from Preference Center.
- (void)onPreferenceCenterPurposeLegitimateInterestChangedWithPurposeId:(NSString * _Nonnull)purposeId legitInterest:(int8_t)legitInterest;
/// Conform to this method to get notified when a purpose consent has changed from Vendor List View.
- (void)onVendorListVendorConsentChangedWithVendorId:(NSString * _Nonnull)vendorId consentStatus:(int8_t)consentStatus;
/// Conform to this method to get notified when a purpose legitimate interest has changed from Vendor List View.
- (void)onVendorListVendorLegitimateInterestChangedWithVendorId:(NSString * _Nonnull)vendorId legitInterest:(int8_t)legitInterest;
@end


/// Represents the Geo location model associated with the OT Data.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK18OTGeolocationModel")
@interface OTGeolocationModel : NSObject
/// Represents the country code in the geo location model.
@property (nonatomic, readonly, copy) NSString * _Nonnull country;
/// Represents the state code in the geo location model.
@property (nonatomic, readonly, copy) NSString * _Nonnull state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// Struct for IAB 2.0 TCF UserDefaults keys
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK12OTIABTCFKeys")
@interface OTIABTCFKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2CmpSdkId;)
+ (NSString * _Nonnull)iabTcf2CmpSdkId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2CmpSdkVersion;)
+ (NSString * _Nonnull)iabTcf2CmpSdkVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PolicyVersion;)
+ (NSString * _Nonnull)iabTcf2PolicyVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2GdprApplies;)
+ (NSString * _Nonnull)iabTcf2GdprApplies SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCC;)
+ (NSString * _Nonnull)iabTcf2PublisherCC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeOneTreatment;)
+ (NSString * _Nonnull)iabTcf2PurposeOneTreatment SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2UseNonStandardStacks;)
+ (NSString * _Nonnull)iabTcf2UseNonStandardStacks SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2TCString;)
+ (NSString * _Nonnull)iabTcf2TCString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2VendorConsents;)
+ (NSString * _Nonnull)iabTcf2VendorConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2VendorLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2VendorLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeConsents;)
+ (NSString * _Nonnull)iabTcf2PurposeConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PurposeLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2SpecialFeaturesOptIns;)
+ (NSString * _Nonnull)iabTcf2SpecialFeaturesOptIns SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherRestrictions;)
+ (NSString * _Nonnull)iabTcf2PublisherRestrictions SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherConsent;)
+ (NSString * _Nonnull)iabTcf2PublisherConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PublisherLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCustomPurposesConsents;)
+ (NSString * _Nonnull)iabTcf2PublisherCustomPurposesConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCustomPurposesLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PublisherCustomPurposesLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2AddtlConsent;)
+ (NSString * _Nonnull)iabTcf2AddtlConsent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// enum to keep a state of Log Levels
typedef SWIFT_ENUM(NSInteger, OTLoggerConstant, open) {
  OTLoggerConstantNoLogs = -1,
  OTLoggerConstantError = 1,
  OTLoggerConstantWarning = 2,
  OTLoggerConstantInfo = 3,
  OTLoggerConstantDebug = 4,
  OTLoggerConstantVerbose = 5,
};


/// Public class to handle OneTrust SDK’s additional parameters.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK19OTProfileSyncParams")
@interface OTProfileSyncParams : NSObject
/// Public function to enable cross device profile sync.
/// \param enabled Boolean to state if cross device sync should be enabled or not.
///
- (void)setSyncProfile:(NSString * _Nonnull)syncProfile;
/// Public function to pass sync profile auth.
/// \param profileAuth String containing sync profile auth.
///
- (void)setSyncProfileAuth:(NSString * _Nonnull)profileAuth;
/// Public function to set sync group identifier
/// \param groupId String containing sync group identifier.
///
- (void)setSyncGroupId:(NSString * _Nonnull)groupId;
/// Public function to set data subject identifier
/// \param dsid String containing data subject identifier.
///
- (void)setIdentifier:(NSString * _Nonnull)dsid;
/// Public function to set tenant Id
/// \param tenantId tenantId as String value
///
- (void)setTenantId:(NSString * _Nonnull)tenantId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol OTUIConfigurator;

/// This class provides the core apis and functionalities of OT SDK.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK23OTPublishersHeadlessSDK")
@interface OTPublishersHeadlessSDK : NSObject
/// Set this delegate in order to customize OT SDK UI.
@property (nonatomic, weak) id <OTUIConfigurator> _Nullable uiConfigurator;
/// Shared public var to get OneTrust publisher Headless SDK instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OTPublishersHeadlessSDK * _Nonnull shared;)
+ (OTPublishersHeadlessSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








@interface OTPublishersHeadlessSDK (SWIFT_EXTENSION(OTPublishersHeadlessSDK))
/// Public function to update consent status for specified UCP purpose id.
/// \param purposeId String purpose Id for which consent status should be change.
///
/// \param value Boolean value specifying updated consent value. Permissible values : true or false
///
- (void)updateUCPurposeConsentWithPurposeId:(NSString * _Nonnull)purposeId withConsent:(BOOL)value;
/// Public function to update consent status for specified UCP topic option id.
/// \param topicOptionId String topic option id for which consent status should be change.
///
/// \param purposeId String purpose id related with specified topic option id for which consent status should be change.
///
/// \param value Boolean value specifying updated consent value. Permissible values : true or false
///
- (void)updateUCPurposeConsentWithTopicOptionId:(NSString * _Nonnull)topicOptionId purposeId:(NSString * _Nonnull)purposeId withConsent:(BOOL)value;
/// Public function to update consent status for specified UCP custom preference option id.
/// \param cpOptionId String custom preference option id for which consent status should be change.
///
/// \param cpId String custom preference id related with custom preference option id.
///
/// \param purposeId String purpose id related with custom preference id.
///
/// \param value Boolean value specifying updated consent value. Permissible values : true or false
///
- (void)updateUCPurposeConsentWithCpOptionId:(NSString * _Nonnull)cpOptionId cpId:(NSString * _Nonnull)cpId purposeId:(NSString * _Nonnull)purposeId withConsent:(BOOL)value;
/// Public function to get consent status for specified UCP purpose id.
/// \param purposeId String purpose Id for which consent status will be return.
///
///
/// returns:
/// Boolean consent value either true or false
- (BOOL)getUCPurposeConsentWithPurposeId:(NSString * _Nonnull)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Public function to get consent status for specified UCP topic option id.
/// \param topicOption String topic option id for which consent status will be return.
///
/// \param purposeId String purpose id related with specified topic option id for which consent status will be return.
///
///
/// returns:
/// Boolean consent value either true or false
- (BOOL)getUCPurposeConsentWithTopicOption:(NSString * _Nonnull)topicOption purposeId:(NSString * _Nonnull)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Public function to update consent status for specified UCP custom preference id.
/// \param cpId String custom preference id for which consent status will be return.
///
/// \param purposeId String purpose id related with specified custom preference id for which consent status will be return.
///
///
/// returns:
/// Dictionary containing custom preference option id as key and value as consent status either 1 or 0
- (NSDictionary<NSString *, NSNumber *> * _Nonnull)getUCPurposeConsentWithCpId:(NSString * _Nonnull)cpId purposeId:(NSString * _Nonnull)purposeId SWIFT_WARN_UNUSED_RESULT;
@end

@class UIViewController;
enum OTUIType : NSInteger;

@interface OTPublishersHeadlessSDK (SWIFT_EXTENSION(OTPublishersHeadlessSDK))
/// Setups up the user interface and shows banner/ preference center UI (if shouldShowBanner() method return true).
/// Call this method on application’s main view controller.
/// \param viewController The View Controller on which the OT SDK UI will be presented.
///
/// \param type If the application wants to show Banner or Preference center UI just after OneTrust data download then pass OTUIType as .banner to show Banner or pass OTUIType as .preferenceCenter to show Preference Center. If the app does not want to show Banner or Preference Center UI just after OneTrust data download then skip second parameter of this method or pass OTUIType as .none.
///
- (void)setupUI:(UIViewController * _Nonnull)viewController UIType:(enum OTUIType)UIType;
/// Public method to show banner user interface if OneTrust data available.
/// Please call this method after setupUI() method.
/// This method doesn’t consider value of shouldShowBanner().
/// This method will show banner if OneTrust data is available otherwise it will show alert with message.
- (void)showBannerUI;
/// Public method to show preference center user interface if OneTrust data available.
/// This method doesn’t consider value of shouldShowBanner().
/// This method will show preference center if OneTrust data is available otherwise it will show alert with message.
/// note:
/// Please call this method after calling setupUI().
- (void)showPreferenceCenterUI;
/// Public method to show universal consent purposes user interface if OneTrust is data available.
/// This method doesn’t consider value of shouldShowBanner().
/// This method will show Consent Purposes UI if OneTrust data is available otherwise it will show alert with message.
/// note:
/// Please call this method after calling setupUI().
- (void)showConsentPurposesUI:(UIViewController * _Nonnull)viewController;
/// Public function for event listener on any user interaction on OneTrust UI.
/// note:
/// The object being passed should conform to <code>OTEventListener</code>. Otherwise this listener will not be set.
/// \param eventListener Pass any class object that conforms to <code>OTEventListener</code>, where you want to listen event.
///
- (void)addEventListener:(id _Nonnull)eventListener;
/// Appends the passed in data element key value pairs to the Data Subject Data Elements while logging consent.
/// \param dataElements custom Data Elements.
///
- (void)appendCustomDataElementsWithDataElements:(NSDictionary<NSString *, id> * _Nonnull)dataElements;
/// Public method to get consent javascript for webview
/// To avoid reconsent in webview, inject this javascript before launching the webview
- (NSString * _Nullable)getOTConsentJSForWebView SWIFT_WARN_UNUSED_RESULT;
/// Dismisses the OT SDK UI if SDK UI is in the view hierarchy.
- (void)dismissUI;
@end

@class OTSdkParams;
@class OTResponse;
enum VendorListMode : NSInteger;

@interface OTPublishersHeadlessSDK (SWIFT_EXTENSION(OTPublishersHeadlessSDK))
/// Starts the OT SDK, fetches and returns the response required to create OT SDK UI.
/// note:
/// This call would fail if there are internet connectivity issues, invalid storage url/domain-Identifier/language-code is passed.
/// \param storageLocation Contains the storage location from where data has to be fetched.
///
/// \param domainIdentifier Containins unique Domain Identifier to be passed (ex: “5376c4e0-8367-450c-8669-a0d41bed69ac”).
///
/// \param languageCode Contains valid ISO Language code for langauge for which localized data has be fetched (ex: “en”)
///
/// \param params Contains OTSdkParams for additional SDK parameters like country code and region code etc. (optional)
///
/// \param completionHandler Completion Handler contains response object that contains a String object indicating the response received from server and Error object containing an error if in case the call has failed.
///
- (void)startSDKWithStorageLocation:(NSString * _Nonnull)storageLocation domainIdentifier:(NSString * _Nonnull)domainIdentifier languageCode:(NSString * _Nonnull)languageCode params:(OTSdkParams * _Nullable)params completionHandler:(void (^ _Nonnull)(OTResponse * _Nonnull))completionHandler;
/// Function to signify if banner should be displayed for user location or not.
/// note:
/// Since banner is supported on only iOS, for other platforms, this will always return false.
///
/// returns:
/// Return boolean true if banner should be shown else false.
- (BOOL)shouldShowBanner SWIFT_WARN_UNUSED_RESULT;
/// Function to get the domain Data.
///
/// returns:
/// Domain Data dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getDomainGroupData SWIFT_WARN_UNUSED_RESULT;
/// Function to get the domain info.
///
/// returns:
/// Domain dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getDomainInfo SWIFT_WARN_UNUSED_RESULT;
/// Function to get the Common Data.
///
/// returns:
/// Common Data dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getCommonData SWIFT_WARN_UNUSED_RESULT;
/// Function to update consent value for specified group Identifier.
/// note:
/// If the category passed is linked with ATT and ATT permission is not granted, update of consent will not be permitted.
/// \param groupId String Group Id for which consent value has to be updated.
///
/// \param consentValue Boolean value specifying updated consent value. Permissible values : true or false
///
/// \param updateHierarchy Updates the hierarchy the group ID belongs to. This value will be false by default.
///
- (void)updatePurposeConsentForGroup:(NSString * _Nonnull)groupId consentValue:(BOOL)consentValue updateHierarchy:(BOOL)updateHierarchy;
/// Function to update legitimate interest value for specified group Identifier.
/// \param groupId String Category Id for which legitimate interest value has to be updated.
///
/// \param legIntValue Boolean value specifying updated legitimate interest value. Permissible values : true or false.
///
- (void)updatePurposeLegitInterestForGroup:(NSString * _Nonnull)groupId legIntValue:(BOOL)legIntValue;
/// Function to get consent value for specified group identifier.
/// \param customGroupId String Purpose Id for which consent value has to be retrieved.
///
///
/// returns:
/// 1 if consent given
/// 0 if consent not given
/// -1 invalid groupId passed
- (int8_t)getPurposeConsentLocalForCustomGroupId:(NSString * _Nonnull)customGroupId SWIFT_WARN_UNUSED_RESULT;
/// Function to get legitimate interest value for specified group identifier.
/// \param customGroupId String Purpose Id for which legitimate interest value has to be retrieved.
///
///
/// returns:
/// 1 if consent given
/// 0 if consent not given
/// -1 invalid groupId passed
- (int8_t)getPurposeLegitInterestLocalForCustomGroupId:(NSString * _Nonnull)customGroupId SWIFT_WARN_UNUSED_RESULT;
/// Public function to get consent value for specified category Identifier. It will return nil in case of application supplied category id doesn’t exist.
/// \param categoryId String Category Id for which value has to be return.
///
- (int8_t)getConsentStatusForCategory:(NSString * _Nonnull)categoryId SWIFT_WARN_UNUSED_RESULT;
/// Public function to get consent value for specified SDK Identifier. It will return nil in case of application supplied SDK id doesn’t exist.
/// \param sdkId String SDK Id for which value has to be return.
///
- (int8_t)getConsentStatusForSDKId:(NSString * _Nonnull)sdkId SWIFT_WARN_UNUSED_RESULT;
/// Returns the last location where the data was last downloaded.
/// note:
/// If data is not downloaded yet, this method will return a default geo location.
///
/// returns:
/// GeolocationModel containing country, state.
- (OTGeolocationModel * _Nonnull)getLastDataDownloadedLocation SWIFT_WARN_UNUSED_RESULT;
/// Returns the last location where the user has last provided consent.
///
/// returns:
/// GeolocationModel containing country, state.
- (OTGeolocationModel * _Nullable)getLastUserConsentedLocation SWIFT_WARN_UNUSED_RESULT;
/// Function to override consent logging identifier
/// \param identifier identifier with which current udid has to be overridden with
///
- (void)overrideDataSubjectIdentifier:(NSString * _Nonnull)identifier;
/// Function to control logging level, pass .noLogs to disable the log.
/// \param level Log level which has to be printed on console.
/// Values: .noLogs, .error, .warning, .info, .debug, .verbose.
/// For any valid logLevel passed SDK will log that level and above level. For instance: If level .info is passed, then error, warning and info logs will be printed.
///
- (void)enableOTSDKLog:(enum OTLoggerConstant)level;
/// Public function to clear OneTrust local data
- (void)clearOTSDKData;
/// Public fnction to reset updated consent values
- (void)resetUpdatedConsent;
/// Public function to set environment for QA/Development
- (void)setEnviroment:(NSString * _Nonnull)environment;
/// Public function to update all vendor consent locally based on the mode passed.
/// \param isSelected Pass true/false to update all vendor consent to 1/0 locally.
///
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
- (void)updateAllVendorsConsentLocal:(BOOL)isSelected for:(enum VendorListMode)mode;
/// Public function to update consent status for a specific vendor.
/// \param vendorId vendor ID.
///
/// \param consentStatus Updated consent status.
///
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
- (void)updateVendorConsentWithVendorId:(NSInteger)vendorId consentStatus:(BOOL)consentStatus for:(enum VendorListMode)mode;
/// Public function to update consent value for vendor LegitInterest.
/// note:
/// Legit interest is supported only for IAB vendors.
/// \param vendorId vendor ID.
///
/// \param legIntStatus Updated legitimate interest status.
///
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
- (void)updateVendorLegitInterestWithVendorId:(NSInteger)vendorId legIntStatus:(BOOL)legIntStatus for:(enum VendorListMode)mode;
/// This method returns all the active vendors associated to the mode passed.
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
- (NSDictionary<NSString *, id> * _Nullable)getVendorListDataFor:(enum VendorListMode)mode SWIFT_WARN_UNUSED_RESULT;
/// Function to get local state of IAB Vendor List
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
///
/// returns:
///
/// <ul>
///   <li>
///     Dictionary containing local state of active IAB Vendor List if values are updated without save using updateVendorConsent/updateVendorLegitInterest.
///   </li>
///   <li>
///     Returns saved IAB Vendor state stored if nothing changed.
///   </li>
///   <li>
///     Nil if none found.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)getVendorListUIFor:(enum VendorListMode)mode SWIFT_WARN_UNUSED_RESULT;
/// Public function to get vendor details for given vendor id
/// \param vendorId vendor id as Int value
///
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
///
/// returns:
/// if vendor is available then this function will return a dictionary for given Vendor Id otherwise this function will return nil
- (NSDictionary<NSString *, id> * _Nullable)getVendorDetailsWithVendorId:(NSInteger)vendorId for:(enum VendorListMode)mode SWIFT_WARN_UNUSED_RESULT;
/// Public method to return dictionary to construct banner user interface
///
/// returns:
/// return banner data dictionary to construct banner UI
- (NSDictionary<NSString *, id> * _Nullable)getBannerData SWIFT_WARN_UNUSED_RESULT;
/// Public method to return dictionary to construct preference center user interface
///
/// returns:
/// return dictionary to construct preference center UI
- (NSDictionary<NSString *, id> * _Nullable)getPreferenceCenterData SWIFT_WARN_UNUSED_RESULT;
/// Public function to Opt-Out of sale of Data. Toggle Disabled.
- (void)optOutOfSaleOfData;
/// Public function to Opt-Into of sale of Data. Toggle Enabled.
- (void)optIntoSaleOfData;
/// public method to enable write logs to file.
/// \param enable enable write logs to file.
///
/// \param debugLog enable write debug logs to file. Default status is false.
///
- (void)writeLogsToFile:(BOOL)enable debugLog:(BOOL)enableVerbose;
/// Public function to set fetch data url
/// \param urlString URL string value
///
- (void)setFetchDataURL:(NSString * _Nonnull)urlString;
/// Function to determine if Banner/Preference center was presented to user at least once.
/// This method will support only if SDK UI methods are used.
///
/// returns:
/// 1 if Banner/Preference Center shown
/// 0 if Banner/Preference Center was not shown yet (implied consent)
/// -1 if SDK not initialized yet
/// 2 if consent taken using profile syncing
- (NSInteger)isBannerShown SWIFT_WARN_UNUSED_RESULT;
/// Saves the consent of the application based on the interaction type passed, and triggers notifications for the same.
/// note:
/// Consent will not be logged to server when interaction type is preference center close.
/// note:
/// consent will not logged to server when there are ATT linked categories and ATT permission is not determined.
/// \param type The interaction type associated with the consent.
///
- (void)saveConsentWithType:(enum OTConsentInteractionType)type;
/// Returns a boolean indicating if OT SDK is current displaying its views in the current view hierarchy.
- (BOOL)sdkViewsCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
/// Returns the value stored in OT SDK that is associated with the passed in key.
/// \param key The key for which the value has to be returned.
///
- (id _Nullable)getValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the consent status for Age gate.
///
/// returns:
///
/// <ul>
///   <li>
///     0  -> If clicked No on Age Gate.
///   </li>
///   <li>
///     1  -> If clicked Yes on Age Gate.
///   </li>
///   <li>
///     -1 -> If not yet interacted with Age Gate Prompt.
///   </li>
/// </ul>
- (NSInteger)getAgeGatePromptValue SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents the OT SDK server response data.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK10OTResponse")
@interface OTResponse : NSObject
/// Represents any error that has occurred while starting OT SDK.
@property (nonatomic, readonly) NSError * _Nullable error;
/// Represents the entire server response received while starting OT SDK..
@property (nonatomic, readonly, copy) NSString * _Nullable responseString;
/// Represents if the OT SDK data download call was successful or not.
/// note:
/// Refer to <code>responseString</code> and <code>error</code> for more details.
@property (nonatomic, readonly) BOOL status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Public class to handle OneTrust SDK’s additional parameters.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK11OTSdkParams")
@interface OTSdkParams : NSObject
/// Initializer for OTSdkParams
/// \param countryCode String containing a valid country code.
///
/// \param regionCode String containing a valid region code.
///
- (nonnull instancetype)initWithCountryCode:(NSString * _Nullable)countryCode regionCode:(NSString * _Nullable)regionCode OBJC_DESIGNATED_INITIALIZER;
/// Set SDK/API version.
/// note:
/// This API is for testing only. Do not go live with an overridden API version.
/// \param sdkVersion SDK version for which data should be retrieved.
///
- (void)setSDKVersion:(NSString * _Nonnull)sdkVersion;
/// Public function to enable cross device profile sync.
/// \param enabled Boolean to state if cross device sync should be enabled or not.
///
- (void)setProfileSyncParams:(OTProfileSyncParams * _Nonnull)crossDeviceParams;
/// Public function to enable profile creation.
/// \param enabled Boolean to state if profile creation should be enabled or not.
///
- (void)setShouldCreateProfile:(NSString * _Nonnull)shouldCreateProfile;
/// Public function to set OneTrust banner height ratio with screen height
/// \param heightProportion OTBannerHeightRatio enum
///
- (void)setBannerHeightRatio:(enum OTBannerHeightRatio)heightRatio SWIFT_DEPRECATED_MSG("This API will be removed completely in a couple of releases (6.29). Please configure this at the template level on the OneTrust server.");
/// Public function to enable Web SDK consent sync to Native SDK
/// \param shouldSync Bool value as true will sync Web SDK consent
///
- (void)syncWebSDKConsent:(BOOL)shouldSync;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum for OneTrust user interface
typedef SWIFT_ENUM(NSInteger, OTUIType, open) {
/// don’t show any UI
  OTUITypeNone = -1,
/// use to show banner UI
  OTUITypeBanner = 0,
/// Use to show preference center UI
  OTUITypePreferenceCenter = 1,
};


/// Struct containing all the UserDefault keys being saved
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK17OTUserDefaultKeys")
@interface OTUserDefaultKeys : NSObject
/// Key for storing culture data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cultureData;)
+ (NSString * _Nonnull)cultureData SWIFT_WARN_UNUSED_RESULT;
/// Key for storing domain data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull domainData;)
+ (NSString * _Nonnull)domainData SWIFT_WARN_UNUSED_RESULT;
/// Key for storing profile data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull profileData;)
+ (NSString * _Nonnull)profileData SWIFT_WARN_UNUSED_RESULT;
/// key to check whether consent is given or not
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userConsentStatus;)
+ (NSString * _Nonnull)userConsentStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end















enum VendorListJourneyType : NSInteger;

/// Conform to this protocol to perform customizations on OT SDK UI.
SWIFT_PROTOCOL_NAMED("UIConfigurator")
@protocol OTUIConfigurator
/// Determines if ui config plist provided by OTSDK should be used while populating UI.
/// note:
/// In order to customize the UI components, add values adjacent to the keys in OTSDK-UIConfig-iOS.plist file.
/// note:
/// The application can also copy the plist into its project and provide the path for it by conforming to the <code>customUIConfigFilePath</code> method in protocol.
- (BOOL)shouldUseCustomUIConfig SWIFT_WARN_UNUSED_RESULT;
@optional
/// Conform to this method to provide a custom path for the OTSDK-UIConfig-iOS.plist file.
/// Pass in the path to the custom ui config file.
/// note:
/// If this method is not overriden or a empty path is passed, the OT SDK will pick the plist from the default location.
/// note:
/// MAKE SURE that format of the plist we are passing IS SAME AS the plist located in the OT SDK.
- (NSString * _Nullable)customUIConfigFilePath SWIFT_WARN_UNUSED_RESULT;
/// Conform to this method to provide vendor list user journey.
/// Pass in <code>.hideConfirmMyChoices</code> for going back to the screen from where you came. It is the default flow.
/// note:
/// <code>.hideConfirmMyChoices</code>does not log the consent, it saves the user consent and <code>Confirm My Choices</code>                            button will be hidden in vendor list screen.
/// note:
/// <code>.showConfirmMyChoices</code> logs the consent and it dismisses all SDK UI on click of <code>Confirm My Choices</code>.
- (enum VendorListJourneyType)getVendorListJourney SWIFT_WARN_UNUSED_RESULT;
/// Conform to this method to force enable or disable the dark mode for SDK.
/// By Conforming to this method, device’s <code>Dark Appearance</code> setting would be overridden for SDK
/// note:
/// return <code>false</code> to force the sdk to light mode irrespective of the device’s <code>Dark Appearance</code> setting.
/// note:
/// return <code>true</code> to force the sdk to dark mode irrespective of the device’s <code>Dark Appearance</code> setting.
- (BOOL)shouldEnableDarkMode SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
@end































/// Enum for Vendor list user journey
typedef SWIFT_ENUM(NSInteger, VendorListJourneyType, open) {
/// The showConfirmMyChoices vendor list journey type.
/// note:
/// Confirmy Choices button will be enabled in Vendor List UI.
  VendorListJourneyTypeShowConfirmMyChoices = 0,
/// Custom vendor list journey type where the Confirm Choices button on Vendor List UI will be hidden.
/// note:
/// Changes made in Vendor List UI will not be persisted across app launches unless a save action is performed on Banner or PC UI.
  VendorListJourneyTypeHideConfirmMyChoices = 1,
};

/// The Vendor list mode.
typedef SWIFT_ENUM(NSInteger, VendorListMode, open) {
/// Google Vendor List.
  VendorListModeGoogle = 0,
/// IAB Vendor List.
  VendorListModeIab = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef OTPUBLISHERSHEADLESSSDK_SWIFT_H
#define OTPUBLISHERSHEADLESSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OTPublishersHeadlessSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



/// Contains information related to the locally cached data of OT SDK.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK5Cache")
@interface Cache : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the type of consent provided by the application.
typedef SWIFT_ENUM_NAMED(NSInteger, OTConsentInteractionType, "ConsentInteractionType", open) {
/// The user has consented by clicking accept all button in Banner view.
/// Passing this will accept all consent values.
  OTConsentInteractionTypeBannerAllowAll = 1,
/// The user has consented by clicking reject all button in Banner view.
/// Passing this will reject all consent values.
  OTConsentInteractionTypeBannerRejectAll = 2,
/// The user has clicked on cancel  button in Banner view.
/// Passing this will set the default consent values.
  OTConsentInteractionTypeBannerClose = 3,
/// The user has consented by clicking allow all button from Preference Center.
/// Passing this will accept all consent values.
  OTConsentInteractionTypePreferenceCenterAllowAll = 4,
/// The user has consented by clicking reject all button from Preference Center.
/// Passing this will reject all consent values.
  OTConsentInteractionTypePreferenceCenterRejectAll = 5,
/// The user has consented by clicking confirm button from Preference Center.
/// Passing this will set the confirmed consent values.
  OTConsentInteractionTypePreferenceCenterConfirm = 6,
/// The user has clicked on cancel  button in Preference Center.
/// note:
/// Consent will not be logged to server when this interaction type is passed.
  OTConsentInteractionTypePreferenceCenterClose = 7,
/// The user has clicked on save choices button in uc Purposes Preference Center.
/// note:
/// Consent will be logged to server when this interaction type is passed.
  OTConsentInteractionTypeConsentPurposesConfim = 8,
/// The user has clicked on cancel button in uc Purposes Preference Center.
/// note:
/// Consent will not be logged to server when this interaction type is passed.
  OTConsentInteractionTypeConsentPurposesClose = 9,
/// The user has consented by clicking confirm button from Vendor List View.
/// Passing this will set the confirmed consent values.
  OTConsentInteractionTypeVendorListConfirm = 10,
/// The user has clicked on Allow  button in ATT View.
  OTConsentInteractionTypeAppTrackingConfirm = 11,
/// The user has clicked on Ask app not to track  button in ATT View.
  OTConsentInteractionTypeAppTrackingOptOut = 12,
/// The user has clicked on confirm  button in Universal Consent Preference Center View.
  OTConsentInteractionTypeUcPreferenceCenterConfirm = 13,
};

/// Enum for IAB CCPA expected values
typedef SWIFT_ENUM(NSInteger, IabCcpaConsent, open) {
  IabCcpaConsentNotApplicable = 0,
  IabCcpaConsentNo = 1,
  IabCcpaConsentYes = 2,
};



/// Enum for OneTrust banner height
typedef SWIFT_ENUM(NSInteger, OTBannerHeightRatio, open) {
/// Show banner in full screen.
  OTBannerHeightRatioFull = 1,
  OTBannerHeightRatioTwo_third = 2,
/// Show banner in half of the screen.
  OTBannerHeightRatioOne_half = 3,
/// Show banner in 1/3rd of the screen.
  OTBannerHeightRatioOne_third = 4,
};

typedef SWIFT_ENUM(NSInteger, OTCCPAGeolocation, open) {
  OTCCPAGeolocationALL = 0,
  OTCCPAGeolocationUS = 1,
  OTCCPAGeolocationCA = 2,
};


/// Conform to this protocol in order to receive various events triggered by OT SDK.
SWIFT_PROTOCOL("_TtP23OTPublishersHeadlessSDK15OTEventListener_")
@protocol OTEventListener
@optional
/// Conform to this method to get notified when Banner view is shown in the view hierarchy.
- (void)onShowBanner;
/// Conform to this method to get notified when Preference Center is shown in the view hierarchy.
- (void)onShowPreferenceCenter;
/// Conform to this method to get notified when Vendor List is shown in the view hierarchy.
- (void)onShowVendorList;
/// Conform to this method to get notified when Consent puurposes is shown in the view hierarchy.
- (void)onShowConsentPurposesUI;
/// Conform to this method to get notified when all the OT SDK Views are dismissed from the view hierarchy.
/// \param interactionType The user interaction type.
///
- (void)allSDKViewsDismissedWithInteractionType:(enum OTConsentInteractionType)interactionType;
/// Conform to this method to get notified when user selects <code>Accept All</code> option from the banner view and the banner view gets dismissed from the view hierarchy.
- (void)onBannerClickedAcceptAll;
/// Conform to this method to get notified when user selects <code>Reject All</code> option from the banner view and the banner view gets dismissed from the view hierarchy.
- (void)onBannerClickedRejectAll;
/// Conform to this method to get notified when user selects <code>Close</code> option from the banner view and the banner view gets dismissed from the view hierarchy.
- (void)onHideBanner;
/// Conform to this method to get notified when user selects <code>Accept All</code> option from the prefence center and the prefence center gets dismissed from the view hierarchy.
- (void)onPreferenceCenterAcceptAll;
/// Conform to this method to get notified when user selects <code>Reject All</code> option from the prefence center and the prefence center gets dismissed from the view hierarchy.
- (void)onPreferenceCenterRejectAll;
/// Conform to this method to get notified when user selects <code>Confirm Choices</code> option from the prefence center and the prefence center gets dismissed from the view hierarchy.
- (void)onPreferenceCenterConfirmChoices;
/// Conform to this method to get notified when user selects <code>Close</code> option from the prefence center and the prefence center gets dismissed from the view hierarchy.
- (void)onHidePreferenceCenter;
/// Conform to this method to get notified when user selects <code>Confirm Choices</code> option from the Vendor List view and the Vendor List view gets dismissed from the view hierarchy.
- (void)onVendorConfirmChoices;
/// Conform to this method to get notified when user selects <code>Back</code> button from the vendor list view and the Vendor List view gets dismissed from the view hierarchy.
- (void)onHideVendorList;
/// Conform to this method to get notified when a purpose consent has changed from Preference Center.
- (void)onPreferenceCenterPurposeConsentChangedWithPurposeId:(NSString * _Nonnull)purposeId consentStatus:(int8_t)consentStatus;
/// Conform to this method to get notified when a purpose legitimate interest has changed from Preference Center.
- (void)onPreferenceCenterPurposeLegitimateInterestChangedWithPurposeId:(NSString * _Nonnull)purposeId legitInterest:(int8_t)legitInterest;
/// Conform to this method to get notified when a purpose consent has changed from Vendor List View.
- (void)onVendorListVendorConsentChangedWithVendorId:(NSString * _Nonnull)vendorId consentStatus:(int8_t)consentStatus;
/// Conform to this method to get notified when a purpose legitimate interest has changed from Vendor List View.
- (void)onVendorListVendorLegitimateInterestChangedWithVendorId:(NSString * _Nonnull)vendorId legitInterest:(int8_t)legitInterest;
@end


/// Represents the Geo location model associated with the OT Data.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK18OTGeolocationModel")
@interface OTGeolocationModel : NSObject
/// Represents the country code in the geo location model.
@property (nonatomic, readonly, copy) NSString * _Nonnull country;
/// Represents the state code in the geo location model.
@property (nonatomic, readonly, copy) NSString * _Nonnull state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// Struct for IAB 2.0 TCF UserDefaults keys
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK12OTIABTCFKeys")
@interface OTIABTCFKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2CmpSdkId;)
+ (NSString * _Nonnull)iabTcf2CmpSdkId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2CmpSdkVersion;)
+ (NSString * _Nonnull)iabTcf2CmpSdkVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PolicyVersion;)
+ (NSString * _Nonnull)iabTcf2PolicyVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2GdprApplies;)
+ (NSString * _Nonnull)iabTcf2GdprApplies SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCC;)
+ (NSString * _Nonnull)iabTcf2PublisherCC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeOneTreatment;)
+ (NSString * _Nonnull)iabTcf2PurposeOneTreatment SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2UseNonStandardStacks;)
+ (NSString * _Nonnull)iabTcf2UseNonStandardStacks SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2TCString;)
+ (NSString * _Nonnull)iabTcf2TCString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2VendorConsents;)
+ (NSString * _Nonnull)iabTcf2VendorConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2VendorLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2VendorLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeConsents;)
+ (NSString * _Nonnull)iabTcf2PurposeConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PurposeLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PurposeLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2SpecialFeaturesOptIns;)
+ (NSString * _Nonnull)iabTcf2SpecialFeaturesOptIns SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherRestrictions;)
+ (NSString * _Nonnull)iabTcf2PublisherRestrictions SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherConsent;)
+ (NSString * _Nonnull)iabTcf2PublisherConsent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PublisherLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCustomPurposesConsents;)
+ (NSString * _Nonnull)iabTcf2PublisherCustomPurposesConsents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2PublisherCustomPurposesLegitimateInterests;)
+ (NSString * _Nonnull)iabTcf2PublisherCustomPurposesLegitimateInterests SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iabTcf2AddtlConsent;)
+ (NSString * _Nonnull)iabTcf2AddtlConsent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// enum to keep a state of Log Levels
typedef SWIFT_ENUM(NSInteger, OTLoggerConstant, open) {
  OTLoggerConstantNoLogs = -1,
  OTLoggerConstantError = 1,
  OTLoggerConstantWarning = 2,
  OTLoggerConstantInfo = 3,
  OTLoggerConstantDebug = 4,
  OTLoggerConstantVerbose = 5,
};


/// Public class to handle OneTrust SDK’s additional parameters.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK19OTProfileSyncParams")
@interface OTProfileSyncParams : NSObject
/// Public function to enable cross device profile sync.
/// \param enabled Boolean to state if cross device sync should be enabled or not.
///
- (void)setSyncProfile:(NSString * _Nonnull)syncProfile;
/// Public function to pass sync profile auth.
/// \param profileAuth String containing sync profile auth.
///
- (void)setSyncProfileAuth:(NSString * _Nonnull)profileAuth;
/// Public function to set sync group identifier
/// \param groupId String containing sync group identifier.
///
- (void)setSyncGroupId:(NSString * _Nonnull)groupId;
/// Public function to set data subject identifier
/// \param dsid String containing data subject identifier.
///
- (void)setIdentifier:(NSString * _Nonnull)dsid;
/// Public function to set tenant Id
/// \param tenantId tenantId as String value
///
- (void)setTenantId:(NSString * _Nonnull)tenantId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol OTUIConfigurator;

/// This class provides the core apis and functionalities of OT SDK.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK23OTPublishersHeadlessSDK")
@interface OTPublishersHeadlessSDK : NSObject
/// Set this delegate in order to customize OT SDK UI.
@property (nonatomic, weak) id <OTUIConfigurator> _Nullable uiConfigurator;
/// Shared public var to get OneTrust publisher Headless SDK instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OTPublishersHeadlessSDK * _Nonnull shared;)
+ (OTPublishersHeadlessSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








@interface OTPublishersHeadlessSDK (SWIFT_EXTENSION(OTPublishersHeadlessSDK))
/// Public function to update consent status for specified UCP purpose id.
/// \param purposeId String purpose Id for which consent status should be change.
///
/// \param value Boolean value specifying updated consent value. Permissible values : true or false
///
- (void)updateUCPurposeConsentWithPurposeId:(NSString * _Nonnull)purposeId withConsent:(BOOL)value;
/// Public function to update consent status for specified UCP topic option id.
/// \param topicOptionId String topic option id for which consent status should be change.
///
/// \param purposeId String purpose id related with specified topic option id for which consent status should be change.
///
/// \param value Boolean value specifying updated consent value. Permissible values : true or false
///
- (void)updateUCPurposeConsentWithTopicOptionId:(NSString * _Nonnull)topicOptionId purposeId:(NSString * _Nonnull)purposeId withConsent:(BOOL)value;
/// Public function to update consent status for specified UCP custom preference option id.
/// \param cpOptionId String custom preference option id for which consent status should be change.
///
/// \param cpId String custom preference id related with custom preference option id.
///
/// \param purposeId String purpose id related with custom preference id.
///
/// \param value Boolean value specifying updated consent value. Permissible values : true or false
///
- (void)updateUCPurposeConsentWithCpOptionId:(NSString * _Nonnull)cpOptionId cpId:(NSString * _Nonnull)cpId purposeId:(NSString * _Nonnull)purposeId withConsent:(BOOL)value;
/// Public function to get consent status for specified UCP purpose id.
/// \param purposeId String purpose Id for which consent status will be return.
///
///
/// returns:
/// Boolean consent value either true or false
- (BOOL)getUCPurposeConsentWithPurposeId:(NSString * _Nonnull)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Public function to get consent status for specified UCP topic option id.
/// \param topicOption String topic option id for which consent status will be return.
///
/// \param purposeId String purpose id related with specified topic option id for which consent status will be return.
///
///
/// returns:
/// Boolean consent value either true or false
- (BOOL)getUCPurposeConsentWithTopicOption:(NSString * _Nonnull)topicOption purposeId:(NSString * _Nonnull)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Public function to update consent status for specified UCP custom preference id.
/// \param cpId String custom preference id for which consent status will be return.
///
/// \param purposeId String purpose id related with specified custom preference id for which consent status will be return.
///
///
/// returns:
/// Dictionary containing custom preference option id as key and value as consent status either 1 or 0
- (NSDictionary<NSString *, NSNumber *> * _Nonnull)getUCPurposeConsentWithCpId:(NSString * _Nonnull)cpId purposeId:(NSString * _Nonnull)purposeId SWIFT_WARN_UNUSED_RESULT;
@end

@class UIViewController;
enum OTUIType : NSInteger;

@interface OTPublishersHeadlessSDK (SWIFT_EXTENSION(OTPublishersHeadlessSDK))
/// Setups up the user interface and shows banner/ preference center UI (if shouldShowBanner() method return true).
/// Call this method on application’s main view controller.
/// \param viewController The View Controller on which the OT SDK UI will be presented.
///
/// \param type If the application wants to show Banner or Preference center UI just after OneTrust data download then pass OTUIType as .banner to show Banner or pass OTUIType as .preferenceCenter to show Preference Center. If the app does not want to show Banner or Preference Center UI just after OneTrust data download then skip second parameter of this method or pass OTUIType as .none.
///
- (void)setupUI:(UIViewController * _Nonnull)viewController UIType:(enum OTUIType)UIType;
/// Public method to show banner user interface if OneTrust data available.
/// Please call this method after setupUI() method.
/// This method doesn’t consider value of shouldShowBanner().
/// This method will show banner if OneTrust data is available otherwise it will show alert with message.
- (void)showBannerUI;
/// Public method to show preference center user interface if OneTrust data available.
/// This method doesn’t consider value of shouldShowBanner().
/// This method will show preference center if OneTrust data is available otherwise it will show alert with message.
/// note:
/// Please call this method after calling setupUI().
- (void)showPreferenceCenterUI;
/// Public method to show universal consent purposes user interface if OneTrust is data available.
/// This method doesn’t consider value of shouldShowBanner().
/// This method will show Consent Purposes UI if OneTrust data is available otherwise it will show alert with message.
/// note:
/// Please call this method after calling setupUI().
- (void)showConsentPurposesUI:(UIViewController * _Nonnull)viewController;
/// Public function for event listener on any user interaction on OneTrust UI.
/// note:
/// The object being passed should conform to <code>OTEventListener</code>. Otherwise this listener will not be set.
/// \param eventListener Pass any class object that conforms to <code>OTEventListener</code>, where you want to listen event.
///
- (void)addEventListener:(id _Nonnull)eventListener;
/// Appends the passed in data element key value pairs to the Data Subject Data Elements while logging consent.
/// \param dataElements custom Data Elements.
///
- (void)appendCustomDataElementsWithDataElements:(NSDictionary<NSString *, id> * _Nonnull)dataElements;
/// Public method to get consent javascript for webview
/// To avoid reconsent in webview, inject this javascript before launching the webview
- (NSString * _Nullable)getOTConsentJSForWebView SWIFT_WARN_UNUSED_RESULT;
/// Dismisses the OT SDK UI if SDK UI is in the view hierarchy.
- (void)dismissUI;
@end

@class OTSdkParams;
@class OTResponse;
enum VendorListMode : NSInteger;

@interface OTPublishersHeadlessSDK (SWIFT_EXTENSION(OTPublishersHeadlessSDK))
/// Starts the OT SDK, fetches and returns the response required to create OT SDK UI.
/// note:
/// This call would fail if there are internet connectivity issues, invalid storage url/domain-Identifier/language-code is passed.
/// \param storageLocation Contains the storage location from where data has to be fetched.
///
/// \param domainIdentifier Containins unique Domain Identifier to be passed (ex: “5376c4e0-8367-450c-8669-a0d41bed69ac”).
///
/// \param languageCode Contains valid ISO Language code for langauge for which localized data has be fetched (ex: “en”)
///
/// \param params Contains OTSdkParams for additional SDK parameters like country code and region code etc. (optional)
///
/// \param completionHandler Completion Handler contains response object that contains a String object indicating the response received from server and Error object containing an error if in case the call has failed.
///
- (void)startSDKWithStorageLocation:(NSString * _Nonnull)storageLocation domainIdentifier:(NSString * _Nonnull)domainIdentifier languageCode:(NSString * _Nonnull)languageCode params:(OTSdkParams * _Nullable)params completionHandler:(void (^ _Nonnull)(OTResponse * _Nonnull))completionHandler;
/// Function to signify if banner should be displayed for user location or not.
/// note:
/// Since banner is supported on only iOS, for other platforms, this will always return false.
///
/// returns:
/// Return boolean true if banner should be shown else false.
- (BOOL)shouldShowBanner SWIFT_WARN_UNUSED_RESULT;
/// Function to get the domain Data.
///
/// returns:
/// Domain Data dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getDomainGroupData SWIFT_WARN_UNUSED_RESULT;
/// Function to get the domain info.
///
/// returns:
/// Domain dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getDomainInfo SWIFT_WARN_UNUSED_RESULT;
/// Function to get the Common Data.
///
/// returns:
/// Common Data dictionary.
- (NSDictionary<NSString *, id> * _Nullable)getCommonData SWIFT_WARN_UNUSED_RESULT;
/// Function to update consent value for specified group Identifier.
/// note:
/// If the category passed is linked with ATT and ATT permission is not granted, update of consent will not be permitted.
/// \param groupId String Group Id for which consent value has to be updated.
///
/// \param consentValue Boolean value specifying updated consent value. Permissible values : true or false
///
/// \param updateHierarchy Updates the hierarchy the group ID belongs to. This value will be false by default.
///
- (void)updatePurposeConsentForGroup:(NSString * _Nonnull)groupId consentValue:(BOOL)consentValue updateHierarchy:(BOOL)updateHierarchy;
/// Function to update legitimate interest value for specified group Identifier.
/// \param groupId String Category Id for which legitimate interest value has to be updated.
///
/// \param legIntValue Boolean value specifying updated legitimate interest value. Permissible values : true or false.
///
- (void)updatePurposeLegitInterestForGroup:(NSString * _Nonnull)groupId legIntValue:(BOOL)legIntValue;
/// Function to get consent value for specified group identifier.
/// \param customGroupId String Purpose Id for which consent value has to be retrieved.
///
///
/// returns:
/// 1 if consent given
/// 0 if consent not given
/// -1 invalid groupId passed
- (int8_t)getPurposeConsentLocalForCustomGroupId:(NSString * _Nonnull)customGroupId SWIFT_WARN_UNUSED_RESULT;
/// Function to get legitimate interest value for specified group identifier.
/// \param customGroupId String Purpose Id for which legitimate interest value has to be retrieved.
///
///
/// returns:
/// 1 if consent given
/// 0 if consent not given
/// -1 invalid groupId passed
- (int8_t)getPurposeLegitInterestLocalForCustomGroupId:(NSString * _Nonnull)customGroupId SWIFT_WARN_UNUSED_RESULT;
/// Public function to get consent value for specified category Identifier. It will return nil in case of application supplied category id doesn’t exist.
/// \param categoryId String Category Id for which value has to be return.
///
- (int8_t)getConsentStatusForCategory:(NSString * _Nonnull)categoryId SWIFT_WARN_UNUSED_RESULT;
/// Public function to get consent value for specified SDK Identifier. It will return nil in case of application supplied SDK id doesn’t exist.
/// \param sdkId String SDK Id for which value has to be return.
///
- (int8_t)getConsentStatusForSDKId:(NSString * _Nonnull)sdkId SWIFT_WARN_UNUSED_RESULT;
/// Returns the last location where the data was last downloaded.
/// note:
/// If data is not downloaded yet, this method will return a default geo location.
///
/// returns:
/// GeolocationModel containing country, state.
- (OTGeolocationModel * _Nonnull)getLastDataDownloadedLocation SWIFT_WARN_UNUSED_RESULT;
/// Returns the last location where the user has last provided consent.
///
/// returns:
/// GeolocationModel containing country, state.
- (OTGeolocationModel * _Nullable)getLastUserConsentedLocation SWIFT_WARN_UNUSED_RESULT;
/// Function to override consent logging identifier
/// \param identifier identifier with which current udid has to be overridden with
///
- (void)overrideDataSubjectIdentifier:(NSString * _Nonnull)identifier;
/// Function to control logging level, pass .noLogs to disable the log.
/// \param level Log level which has to be printed on console.
/// Values: .noLogs, .error, .warning, .info, .debug, .verbose.
/// For any valid logLevel passed SDK will log that level and above level. For instance: If level .info is passed, then error, warning and info logs will be printed.
///
- (void)enableOTSDKLog:(enum OTLoggerConstant)level;
/// Public function to clear OneTrust local data
- (void)clearOTSDKData;
/// Public fnction to reset updated consent values
- (void)resetUpdatedConsent;
/// Public function to set environment for QA/Development
- (void)setEnviroment:(NSString * _Nonnull)environment;
/// Public function to update all vendor consent locally based on the mode passed.
/// \param isSelected Pass true/false to update all vendor consent to 1/0 locally.
///
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
- (void)updateAllVendorsConsentLocal:(BOOL)isSelected for:(enum VendorListMode)mode;
/// Public function to update consent status for a specific vendor.
/// \param vendorId vendor ID.
///
/// \param consentStatus Updated consent status.
///
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
- (void)updateVendorConsentWithVendorId:(NSInteger)vendorId consentStatus:(BOOL)consentStatus for:(enum VendorListMode)mode;
/// Public function to update consent value for vendor LegitInterest.
/// note:
/// Legit interest is supported only for IAB vendors.
/// \param vendorId vendor ID.
///
/// \param legIntStatus Updated legitimate interest status.
///
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
- (void)updateVendorLegitInterestWithVendorId:(NSInteger)vendorId legIntStatus:(BOOL)legIntStatus for:(enum VendorListMode)mode;
/// This method returns all the active vendors associated to the mode passed.
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
- (NSDictionary<NSString *, id> * _Nullable)getVendorListDataFor:(enum VendorListMode)mode SWIFT_WARN_UNUSED_RESULT;
/// Function to get local state of IAB Vendor List
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
///
/// returns:
///
/// <ul>
///   <li>
///     Dictionary containing local state of active IAB Vendor List if values are updated without save using updateVendorConsent/updateVendorLegitInterest.
///   </li>
///   <li>
///     Returns saved IAB Vendor state stored if nothing changed.
///   </li>
///   <li>
///     Nil if none found.
///   </li>
/// </ul>
- (NSDictionary<NSString *, id> * _Nullable)getVendorListUIFor:(enum VendorListMode)mode SWIFT_WARN_UNUSED_RESULT;
/// Public function to get vendor details for given vendor id
/// \param vendorId vendor id as Int value
///
/// \param mode The mode of the Vendor List. If no mode is passed, we will consider it as IAB by default.
///
///
/// returns:
/// if vendor is available then this function will return a dictionary for given Vendor Id otherwise this function will return nil
- (NSDictionary<NSString *, id> * _Nullable)getVendorDetailsWithVendorId:(NSInteger)vendorId for:(enum VendorListMode)mode SWIFT_WARN_UNUSED_RESULT;
/// Public method to return dictionary to construct banner user interface
///
/// returns:
/// return banner data dictionary to construct banner UI
- (NSDictionary<NSString *, id> * _Nullable)getBannerData SWIFT_WARN_UNUSED_RESULT;
/// Public method to return dictionary to construct preference center user interface
///
/// returns:
/// return dictionary to construct preference center UI
- (NSDictionary<NSString *, id> * _Nullable)getPreferenceCenterData SWIFT_WARN_UNUSED_RESULT;
/// Public function to Opt-Out of sale of Data. Toggle Disabled.
- (void)optOutOfSaleOfData;
/// Public function to Opt-Into of sale of Data. Toggle Enabled.
- (void)optIntoSaleOfData;
/// public method to enable write logs to file.
/// \param enable enable write logs to file.
///
/// \param debugLog enable write debug logs to file. Default status is false.
///
- (void)writeLogsToFile:(BOOL)enable debugLog:(BOOL)enableVerbose;
/// Public function to set fetch data url
/// \param urlString URL string value
///
- (void)setFetchDataURL:(NSString * _Nonnull)urlString;
/// Function to determine if Banner/Preference center was presented to user at least once.
/// This method will support only if SDK UI methods are used.
///
/// returns:
/// 1 if Banner/Preference Center shown
/// 0 if Banner/Preference Center was not shown yet (implied consent)
/// -1 if SDK not initialized yet
/// 2 if consent taken using profile syncing
- (NSInteger)isBannerShown SWIFT_WARN_UNUSED_RESULT;
/// Saves the consent of the application based on the interaction type passed, and triggers notifications for the same.
/// note:
/// Consent will not be logged to server when interaction type is preference center close.
/// note:
/// consent will not logged to server when there are ATT linked categories and ATT permission is not determined.
/// \param type The interaction type associated with the consent.
///
- (void)saveConsentWithType:(enum OTConsentInteractionType)type;
/// Returns a boolean indicating if OT SDK is current displaying its views in the current view hierarchy.
- (BOOL)sdkViewsCurrentlyPresented SWIFT_WARN_UNUSED_RESULT;
/// Returns the value stored in OT SDK that is associated with the passed in key.
/// \param key The key for which the value has to be returned.
///
- (id _Nullable)getValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the consent status for Age gate.
///
/// returns:
///
/// <ul>
///   <li>
///     0  -> If clicked No on Age Gate.
///   </li>
///   <li>
///     1  -> If clicked Yes on Age Gate.
///   </li>
///   <li>
///     -1 -> If not yet interacted with Age Gate Prompt.
///   </li>
/// </ul>
- (NSInteger)getAgeGatePromptValue SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents the OT SDK server response data.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK10OTResponse")
@interface OTResponse : NSObject
/// Represents any error that has occurred while starting OT SDK.
@property (nonatomic, readonly) NSError * _Nullable error;
/// Represents the entire server response received while starting OT SDK..
@property (nonatomic, readonly, copy) NSString * _Nullable responseString;
/// Represents if the OT SDK data download call was successful or not.
/// note:
/// Refer to <code>responseString</code> and <code>error</code> for more details.
@property (nonatomic, readonly) BOOL status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Public class to handle OneTrust SDK’s additional parameters.
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK11OTSdkParams")
@interface OTSdkParams : NSObject
/// Initializer for OTSdkParams
/// \param countryCode String containing a valid country code.
///
/// \param regionCode String containing a valid region code.
///
- (nonnull instancetype)initWithCountryCode:(NSString * _Nullable)countryCode regionCode:(NSString * _Nullable)regionCode OBJC_DESIGNATED_INITIALIZER;
/// Set SDK/API version.
/// note:
/// This API is for testing only. Do not go live with an overridden API version.
/// \param sdkVersion SDK version for which data should be retrieved.
///
- (void)setSDKVersion:(NSString * _Nonnull)sdkVersion;
/// Public function to enable cross device profile sync.
/// \param enabled Boolean to state if cross device sync should be enabled or not.
///
- (void)setProfileSyncParams:(OTProfileSyncParams * _Nonnull)crossDeviceParams;
/// Public function to enable profile creation.
/// \param enabled Boolean to state if profile creation should be enabled or not.
///
- (void)setShouldCreateProfile:(NSString * _Nonnull)shouldCreateProfile;
/// Public function to set OneTrust banner height ratio with screen height
/// \param heightProportion OTBannerHeightRatio enum
///
- (void)setBannerHeightRatio:(enum OTBannerHeightRatio)heightRatio SWIFT_DEPRECATED_MSG("This API will be removed completely in a couple of releases (6.29). Please configure this at the template level on the OneTrust server.");
/// Public function to enable Web SDK consent sync to Native SDK
/// \param shouldSync Bool value as true will sync Web SDK consent
///
- (void)syncWebSDKConsent:(BOOL)shouldSync;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum for OneTrust user interface
typedef SWIFT_ENUM(NSInteger, OTUIType, open) {
/// don’t show any UI
  OTUITypeNone = -1,
/// use to show banner UI
  OTUITypeBanner = 0,
/// Use to show preference center UI
  OTUITypePreferenceCenter = 1,
};


/// Struct containing all the UserDefault keys being saved
SWIFT_CLASS("_TtC23OTPublishersHeadlessSDK17OTUserDefaultKeys")
@interface OTUserDefaultKeys : NSObject
/// Key for storing culture data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cultureData;)
+ (NSString * _Nonnull)cultureData SWIFT_WARN_UNUSED_RESULT;
/// Key for storing domain data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull domainData;)
+ (NSString * _Nonnull)domainData SWIFT_WARN_UNUSED_RESULT;
/// Key for storing profile data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull profileData;)
+ (NSString * _Nonnull)profileData SWIFT_WARN_UNUSED_RESULT;
/// key to check whether consent is given or not
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userConsentStatus;)
+ (NSString * _Nonnull)userConsentStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end















enum VendorListJourneyType : NSInteger;

/// Conform to this protocol to perform customizations on OT SDK UI.
SWIFT_PROTOCOL_NAMED("UIConfigurator")
@protocol OTUIConfigurator
/// Determines if ui config plist provided by OTSDK should be used while populating UI.
/// note:
/// In order to customize the UI components, add values adjacent to the keys in OTSDK-UIConfig-iOS.plist file.
/// note:
/// The application can also copy the plist into its project and provide the path for it by conforming to the <code>customUIConfigFilePath</code> method in protocol.
- (BOOL)shouldUseCustomUIConfig SWIFT_WARN_UNUSED_RESULT;
@optional
/// Conform to this method to provide a custom path for the OTSDK-UIConfig-iOS.plist file.
/// Pass in the path to the custom ui config file.
/// note:
/// If this method is not overriden or a empty path is passed, the OT SDK will pick the plist from the default location.
/// note:
/// MAKE SURE that format of the plist we are passing IS SAME AS the plist located in the OT SDK.
- (NSString * _Nullable)customUIConfigFilePath SWIFT_WARN_UNUSED_RESULT;
/// Conform to this method to provide vendor list user journey.
/// Pass in <code>.hideConfirmMyChoices</code> for going back to the screen from where you came. It is the default flow.
/// note:
/// <code>.hideConfirmMyChoices</code>does not log the consent, it saves the user consent and <code>Confirm My Choices</code>                            button will be hidden in vendor list screen.
/// note:
/// <code>.showConfirmMyChoices</code> logs the consent and it dismisses all SDK UI on click of <code>Confirm My Choices</code>.
- (enum VendorListJourneyType)getVendorListJourney SWIFT_WARN_UNUSED_RESULT;
/// Conform to this method to force enable or disable the dark mode for SDK.
/// By Conforming to this method, device’s <code>Dark Appearance</code> setting would be overridden for SDK
/// note:
/// return <code>false</code> to force the sdk to light mode irrespective of the device’s <code>Dark Appearance</code> setting.
/// note:
/// return <code>true</code> to force the sdk to dark mode irrespective of the device’s <code>Dark Appearance</code> setting.
- (BOOL)shouldEnableDarkMode SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
@end































/// Enum for Vendor list user journey
typedef SWIFT_ENUM(NSInteger, VendorListJourneyType, open) {
/// The showConfirmMyChoices vendor list journey type.
/// note:
/// Confirmy Choices button will be enabled in Vendor List UI.
  VendorListJourneyTypeShowConfirmMyChoices = 0,
/// Custom vendor list journey type where the Confirm Choices button on Vendor List UI will be hidden.
/// note:
/// Changes made in Vendor List UI will not be persisted across app launches unless a save action is performed on Banner or PC UI.
  VendorListJourneyTypeHideConfirmMyChoices = 1,
};

/// The Vendor list mode.
typedef SWIFT_ENUM(NSInteger, VendorListMode, open) {
/// Google Vendor List.
  VendorListModeGoogle = 0,
/// IAB Vendor List.
  VendorListModeIab = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
